AWSTemplateFormatVersion: '2010-09-09'
Transform:
  - __MACRO_NAMES_PREFIX__AWSTestHarness-TestDoubles
  - AWS::LanguageExtensions
  - __MACRO_NAMES_PREFIX__AWSTestHarness-SecondSub
Parameters:
  DynamoDBTables:
    Type: String
    Default: "{}"
  LambdaFunctionNames:
    Type: CommaDelimitedList
    Default: ""
  S3BucketNames:
    Type: CommaDelimitedList
    Default: ""
Resources:
  TestDoubleManagerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Ref AWS::AccountId
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: SQSInteraction
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:ReceiveMessage
                Resource:
                  - !GetAtt EventsQueue.Arn
        - PolicyName: DynamoDBInteraction
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource:
                  - !GetAtt ResultsTable.Arn
        - PolicyName: TestContextBucketInteraction
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub "${TestContextBucket.Arn}/*"
  'Fn::ForEach::S3BucketInteractionRolePolicies':
    - S3BucketName
    - !Ref S3BucketNames
    - '${S3BucketName}RolePolicy':
        Type: AWS::IAM::RolePolicy
        Properties:
          PolicyName: !Sub "${S3BucketName}BucketInteraction"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:DeleteObject
                - s3:PutObject
              Resource: !Sub "!SecondSub arn:aws:s3:::@{${S3BucketName}Bucket}/*"
            - Effect: Allow
              Action:
                - s3:ListBucket
              Resource: !Sub "!SecondSub arn:aws:s3:::@{${S3BucketName}Bucket}"
          RoleName: !Ref TestDoubleManagerRole
  'Fn::ForEach::S3Buckets':
    - S3BucketName
    - !Ref S3BucketNames
    - '${S3BucketName}Bucket':
        Type: AWS::S3::Bucket
        Properties:
          PublicAccessBlockConfiguration:
            BlockPublicAcls: true
            BlockPublicPolicy: true
            IgnorePublicAcls: true
            RestrictPublicBuckets: true
          BucketEncryption:
            ServerSideEncryptionConfiguration:
              - ServerSideEncryptionByDefault:
                  SSEAlgorithm: AES256
          LifecycleConfiguration:
            Rules:
              - Status: Enabled
                ExpirationInDays: 1
                NoncurrentVersionExpiration:
                  NewerNoncurrentVersions: 1
                  NoncurrentDays: 1
  'Fn::ForEach::LambdaFunctions':
    - LambdaFunctionName
    - !Ref LambdaFunctionNames
    - '${LambdaFunctionName}Function':
        Type: AWS::Lambda::Function
        Properties:
          Code:
            ZipFile: |
              __CODE_PLACEHOLDER__:src/index.py
          Handler: index.handler
          Role: !GetAtt LambdaFunctionExecutionRole.Arn
          Runtime: python3.12
          Timeout: 10
          LoggingConfig:
            ApplicationLogLevel: INFO
            LogFormat: JSON
            SystemLogLevel: INFO
          Environment:
            Variables:
              EVENTS_QUEUE_URL: !Ref EventsQueue
              RESULTS_TABLE_NAME: !Ref ResultsTable
              TEST_CONTEXT_BUCKET_NAME: !Ref TestContextBucket
  LambdaFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SQSInteraction
          PolicyDocument:
            Statement:
              - Action:
                  - sqs:SendMessage*
                Effect: Allow
                Resource: !GetAtt EventsQueue.Arn
        - PolicyName: DynamoDBInteraction
          PolicyDocument:
            Statement:
              - Action:
                  - dynamodb:GetItem
                Effect: Allow
                Resource: !GetAtt ResultsTable.Arn
        - PolicyName: S3Interaction
          PolicyDocument:
            Statement:
              - Action:
                  - s3:GetObject
                Effect: Allow
                Resource: !Sub "${TestContextBucket.Arn}/*"
  EventsQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      ContentBasedDeduplication: true
      MessageRetentionPeriod: 60
      VisibilityTimeout: 5
  ResultsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: partitionKey
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: partitionKey
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: True
  TestContextBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: 1
            NoncurrentVersionExpiration:
              NewerNoncurrentVersions: 1
              NoncurrentDays: 1
Outputs:
  'Fn::ForEach::LambdaFunctionNameOutputs':
    - LambdaFunctionName
    - !Ref LambdaFunctionNames
    - '${LambdaFunctionName}LambdaFunctionName':
        Value:
          Ref: !Sub '${LambdaFunctionName}Function'
  'Fn::ForEach::S3BucketNameOutputs':
    - S3BucketName
    - !Ref S3BucketNames
    - '${S3BucketName}S3BucketName':
        Value:
          Ref: !Sub '${S3BucketName}Bucket'